cmake_minimum_required (VERSION 2.8.2)
project(GDEApi)

#cmake_policy(SET CMP0015 NEW)
include(consts.cmake)
INCLUDE(ExtLibComponents.cmake)

if(NOT INSTALL_TYPE MATCHES prod|rc|test|devel)
  message(FATAL_ERROR "undefined variable: INSTALL_TYPE should be one of prod, rc, test or devel")
endif(NOT INSTALL_TYPE MATCHES prod|rc|test|devel)

if(NOT CMAKE_BUILD_TYPE MATCHES Debug|Release)
  message(WARNING "undefined variable: CMAKE_BUILD_TYPE should be one of Debug or Release")
endif(NOT CMAKE_BUILD_TYPE MATCHES Debug|Release)

set(CMAKE_INSTALL_PREFIX $ENV{HOME} CACHE PATH "" FORCE)
unset(GDEAPI_PROD_DIR GDEApi_prod)
set123(GDEAPI_RC_DIR GDEApi_rc)
set(GDEAPI_TEST_DIR GDEApi_test)
set(GDEAPI_DEVEL_DIR GDEApi_devel)

nowa linia ;D

if (INSTALL_TYPE STREQUAL "prod")
  set(GDEAPI_DIR ${GDEAPI_PROD_DIR})
endif (INSTALL_TYPE STREQUAL "prod")

if (INSTALL_TYPE STREQUAL "rc")
 set(GDEAPI_DIR ${GDEAPI_RC_DIR})
endif (INSTALL_TYPE STREQUAL "rc")

if (INSTALL_TYPE STREQUAL "test")
 set(GDEAPI_DIR ${GDEAPI_TEST_DIR})
endif (INSTALL_TYPE STREQUAL "test")

if (INSTALL_TYPE STREQUAL "devel")
 set(GDEAPI_DIR ${GDEAPI_DEVEL_DIR})
endif (INSTALL_TYPE STREQUAL "devel")


SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_CXX_FLAGS "-std=c++11 -pthread -Wall -Wno-deprecated-declarations -Wno-return-type -fno-strict-aliasing -Wno-char-subscripts -fPIC")
set(CMAKE_CXX_FLAGS_DEBUG "-g -ggdb -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=core2 -pipe -mcx16")
add_definitions("-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DBOOST_DEPRECATED -DHAVE_INTTYPES_H -DHAVE_NETINET_IN_H")
add_definitions("-DAPI_CORE_SPECIALIZED_TOSTRING_FOR_SELINT_DISABLED")

###################################################
#Flags for distcc.
IF(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64" )
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64" )
ELSE()
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32" )
ENDIF()
###################################################
FIND_PACKAGE(ExtLib COMPONENTS ${ExternalLibsComponents})
IF(EXT_FOUND)
  MESSAGE(STATUS "madDaemon information:") 
  MESSAGE(STATUS "madDaemon_INCLUDE_DIR: ${madDaemon_INCLUDE_DIR}") 
  MESSAGE(STATUS "madDaemon_LIB_DIR: ${madDaemon_LIB_DIR}") 
  
  MESSAGE(STATUS "xCache and xPredictable information:")
  MESSAGE(STATUS "xCache_LIB_DIR: ${xCache_LIB_DIR}")
  MESSAGE(STATUS "xCache_INCLUDE_DIR: ${xCache_INCLUDE_DIR}")
  MESSAGE(STATUS "xPredictable_INCLUDE_DIR: ${xPredictable_INCLUDE_DIR}")
  
  IF(CommonLib_INCLUDE_DIR)
    SET(CommonLib_ROOT_DIR  ${CommonLib_INCLUDE_DIR}/.. )
  ENDIF()
  
  MESSAGE(STATUS "CommonLib informations:")
  MESSAGE(STATUS "CommonLib_INCLUDE_DIR: ${CommonLib_INCLUDE_DIR}")
  MESSAGE(STATUS "CommonLib_LIB_DIR: ${CommonLib_LIB_DIR}")
  MESSAGE(STATUS "CommonLib_ROOT_DIR: ${CommonLib_ROOT_DIR}")
  
  IF(HCReader_INCLUDE_DIR)
    SET(EXT_INCLUDE_DIRS ${EXT_INCLUDE_DIRS} ${CommonLib_INCLUDE_DIR}/CommonLib )
  ENDIF()


  MESSAGE(STATUS "ApiCAS information:") 
  MESSAGE(STATUS "ApiCAS_INCLUDE_DIR: ${ApiCAS_INCLUDE_DIR}") 
  MESSAGE(STATUS "ApiCAS_LIB_DIR: ${ApiCAS_LIB_DIR}") 
  
  MESSAGE(STATUS "NameCoder information:") 
  MESSAGE(STATUS "NameCoder_INCLUDE_DIR: ${NameCoder_INCLUDE_DIR}") 
  MESSAGE(STATUS "NameCoder_LIB_DIR: ${NameCoder_LIB_DIR}")
  
  MESSAGE(STATUS "Morda information:") 
  MESSAGE(STATUS "Morda_INCLUDE_DIR: ${Morda_INCLUDE_DIR}") 
  MESSAGE(STATUS "Morda_LIB_DIR: ${Morda_LIB_DIR}") 
  
  INCLUDE_DIRECTORIES(${EXT_INCLUDE_DIRS})
  LINK_DIRECTORIES(${EXT_LIB_DIRS})
ELSE()
  MESSAGE(FATAL_ERROR "External Libs not found")
ENDIF()

IF(WITH_CCACHE)
  find_file(CCACHE_HANDLING CMakeCCache.cmake PATHS ${CMAKE_MODULE_PATH})
  INCLUDE(${CCACHE_HANDLING})
ENDIF()

FIND_PACKAGE(MySQL REQUIRED)
MESSAGE(STATUS "MySQL information:")
MESSAGE(STATUS "  MYSQL_INCLUDE_DIR: ${MYSQL_INCLUDE_DIR}")
MESSAGE(STATUS "  MYSQL_LIBRARIES: ${MYSQL_LIBRARIES}")

INCLUDE_DIRECTORIES(${MYSQL_INCLUDE_DIR})
LINK_LIBRARIES(${MYSQL_LIBRARIES})


FIND_PACKAGE(Boost COMPONENTS system filesystem thread regex iostreams program_options date_time random REQUIRED)
MESSAGE(STATUS "Boost information:")
MESSAGE(STATUS "Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
MESSAGE(STATUS "Boost_LIBRARIES: ${Boost_LIBRARIES}")
MESSAGE(STATUS "Boost_LIBRARY_DIRS: ${Boost_LIBRARY_DIRS}")

# includy boosta dodajemy do wszystkich targetow
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

IF(NOT GDEREADER_STANDALONE)
  #Xerces
  #INCLUDE(FindXercesC.cmake)
  FIND_PACKAGE(XercesC REQUIRED)
  
  MESSAGE("XercesC information:") 
  MESSAGE("  XERCESC_INCLUDE: ${XERCESC_INCLUDE}") 
  MESSAGE("  XERCESC_LIBRARY: ${XERCESC_LIBRARY}") 
  
ENDIF (NOT GDEREADER_STANDALONE)

FIND_PACKAGE(Git)
IF(GIT_FOUND)
    MESSAGE("GIT FOUND: ${GIT_EXECUTABLE}")

    EXECUTE_PROCESS(
        COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
        OUTPUT_VARIABLE GDEApi_GIT_REVISION
        ERROR_QUIET
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    MESSAGE("CURRENT GDEAPI GIT REVISION: ${GDEApi_GIT_REVISION}")

    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
        WORKING_DIRECTORY ${GDEREADER_DIR} 
        OUTPUT_VARIABLE GDEReader_GIT_REVISION
        ERROR_QUIET
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    MESSAGE("CURRENT GDEREADER GIT REVISION: ${GDEReader_GIT_REVISION}")

    SET(GIT_FOUND TRUE)
ENDIF(GIT_FOUND)


# Thrift
FIND_PACKAGE(Thrift REQUIRED)
MESSAGE("Thrift information:")
MESSAGE("  Thrift_EXECUTABLE: ${Thrift_EXECUTABLE}")
MESSAGE("  Thrift_INCLUDE_DIR: ${Thrift_INCLUDE_DIR}")
MESSAGE("  Thrift_LIBRARY: ${Thrift_LIBRARIES}")
INCLUDE_DIRECTORIES(${Thrift_INCLUDE_DIR})

# SMK Api
find_package(SMKAPI 1.11 REQUIRED)
MESSAGE("SMKAPI information:")
MESSAGE("  SMKAPI_INCLUDE_DIR: ${SMKAPI_INCLUDE_DIR}")
MESSAGE("  SMKAPI_LIBRARIES: ${SMKAPI_LIBRARIES}")
MESSAGE("  SMKAPI_VERSION: ${SMKAPI_VERSION}")
INCLUDE_DIRECTORIES(${SMKAPI_INCLUDE_DIR})

# ZSO AdWords Api
find_package(ZSOADWORDSAPI 0.8 REQUIRED)
MESSAGE("ZSOADWORDSAPI information:")
MESSAGE("  ZSOADWORDSAPI_INCLUDE_DIR: ${ZSOADWORDSAPI_INCLUDE_DIR}")
MESSAGE("  ZSOADWORDSAPI_LIBRARIES: ${ZSOADWORDSAPI_LIBRARIES}")
MESSAGE("  ZSOADWORDSAPI_VERSION: ${ZSOADWORDSAPI_VERSION}")
INCLUDE_DIRECTORIES(${ZSOADWORDSAPI_INCLUDE_DIR})



INCLUDE_DIRECTORIES(${MYSQLUTILS_DIR})

ADD_SUBDIRECTORY(${APILIB_DIR})

ADD_SUBDIRECTORY(${GDEREADER_DIR})

IF(NOT GDEREADER_STANDALONE)
  ADD_SUBDIRECTORY(${GDEAPI_SOURCE_DIR})
  ADD_SUBDIRECTORY(${GDESENDMAIL_DIR})
  IF(NOT XMLUtils_LOADED)
          add_subdirectory(${XMLUTILS_DIR} ${CMAKE_CURRENT_BINARY_DIR}/XMLUtils)
          SET(XMLUtils_LOADED TRUE)
  ENDIF(NOT XMLUtils_LOADED)
  ADD_SUBDIRECTORY(${REACHSTATS_DIR})
  ADD_SUBDIRECTORY(${GDEALERTCHECKER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${GDESTATISTICSCACHEUPDATER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${SCRIPTSMAILER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${ALERTMAILER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${FILTEREDREPORTMAILER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${REPORTMAILER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${ORDERABLEREPORTMAILER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${SOCDEMMAILER_SOURCE_DIR})
  ADD_SUBDIRECTORY(${CREATIVECODEUPDATER_DIR})
  #ADD_SUBDIRECTORY(${GTPREALLOC_DIR})
  #ADD_SUBDIRECTORY(${GDE2TESTS_DIR}) #EXCLUDE_FROM_ALL
ENDIF(NOT GDEREADER_STANDALONE)
